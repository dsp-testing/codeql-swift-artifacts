diff --git a/cmake/modules/CMakeLists.txt b/cmake/modules/CMakeLists.txt
index 8046ea79966..cd4fa6e673b 100644
--- a/cmake/modules/CMakeLists.txt
+++ b/cmake/modules/CMakeLists.txt
@@ -17,3 +17,54 @@ configure_file(
   SwiftConfig.cmake.in
   ${swift_cmake_builddir}/SwiftConfig.cmake
   @ONLY)
+
+# Generate install-tree CMake files
+set(SWIFT_CONFIG_CODE "
+# Compute the installation prefix from this SwiftConfig.cmake file location.
+get_filename_component(SWIFT_INSTALL_PREFIX \"\${CMAKE_CURRENT_LIST_FILE}\" PATH)")
+# Construct the proper number of get_filename_component(... PATH)
+# calls to compute the installation prefix.
+string(REGEX REPLACE "/" ";" _count "${SWIFT_INSTALL_PACKAGE_DIR}")
+foreach(p ${_count})
+  set(SWIFT_CONFIG_CODE "${SWIFT_CONFIG_CODE}
+get_filename_component(SWIFT_INSTALL_PREFIX \"\${SWIFT_INSTALL_PREFIX}\" PATH)")
+endforeach(p)
+set(SWIFT_INCLUDE_DIRS "\${SWIFT_INSTALL_PREFIX}/include")
+set(SWIFT_LIBRARY_DIRS "\${SWIFT_INSTALL_PREFIX}/lib")
+set(SWIFT_CMAKE_DIR "\${SWIFT_INSTALL_PREFIX}/${SWIFT_INSTALL_PACKAGE_DIR}")
+set(SWIFT_BINARY_DIR "\${SWIFT_INSTALL_PREFIX}")
+
+set(SWIFT_EXPORTS_FILE "\${SWIFT_CMAKE_DIR}/SwiftExports.cmake")
+set(SWIFT_CONFIG_EXPORTS ${SWIFT_EXPORTS})
+
+install(TARGETS ${SWIFT_CONFIG_EXPORTS}
+  DESTINATION .
+  EXPORT SwiftExports
+  COMPONENT dev)
+
+include(CMakePackageConfigHelpers)
+configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/SwiftConfig.cmake.in
+  "${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/SwiftConfig.cmake"
+  INSTALL_DESTINATION ${SWIFT_INSTALL_PACKAGE_DIR}/cmake/swift)
+
+install(FILES
+  ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/SwiftConfig.cmake
+  DESTINATION ${SWIFT_INSTALL_PACKAGE_DIR})
+
+install(EXPORT SwiftExports DESTINATION ${SWIFT_INSTALL_PACKAGE_DIR})
+
+# installing each header individually to preserve the directory structure
+macro(install_headers directory ext)
+  file(GLOB_RECURSE headers RELATIVE ${directory} ${directory}/*.${ext})
+  foreach(header ${headers})
+    get_filename_component(dir ${header} DIRECTORY)
+    install(FILES ${directory}/${header} DESTINATION ${SWIFT_INCLUDE_DIRS}/${dir})
+  endforeach()
+endmacro()
+install_headers(${SWIFT_INCLUDE_DIR} h)
+install_headers(${SWIFT_MAIN_INCLUDE_DIR} h)
+install_headers(${SWIFT_INCLUDE_DIR} def)
+install_headers(${SWIFT_MAIN_INCLUDE_DIR} def)
+
+install(DIRECTORY ${CMAKE_SOURCE_DIR}/stdlib/public/SwiftShims DESTINATION stdlib/public)
+
diff --git a/cmake/modules/SwiftComponents.cmake b/cmake/modules/SwiftComponents.cmake
index 4d77e374deb..88b6645a811 100644
--- a/cmake/modules/SwiftComponents.cmake
+++ b/cmake/modules/SwiftComponents.cmake
@@ -76,7 +76,7 @@ set(_SWIFT_DEFINED_COMPONENTS
 # for the following exceptions.
 set(_SWIFT_DEFAULT_COMPONENTS "${_SWIFT_DEFINED_COMPONENTS}")
 # 'dev' takes up a lot of disk space and isn't part of a normal toolchain.
-list(REMOVE_ITEM _SWIFT_DEFAULT_COMPONENTS "dev")
+#list(REMOVE_ITEM _SWIFT_DEFAULT_COMPONENTS "dev")
 # These clang header options conflict with 'clang-builtin-headers'.
 list(REMOVE_ITEM _SWIFT_DEFAULT_COMPONENTS "clang-resource-dir-symlink")
 list(REMOVE_ITEM _SWIFT_DEFAULT_COMPONENTS "clang-builtin-headers-in-clang-resource-dir")
diff --git a/include/swift/AST/Stmt.h b/include/swift/AST/Stmt.h
index 532e038c386..f013eee2f98 100644
--- a/include/swift/AST/Stmt.h
+++ b/include/swift/AST/Stmt.h
@@ -920,7 +920,6 @@ public:
   /// Get the CaseStmt block to which the fallthrough transfers control.
   /// Set during Sema.
   CaseStmt *getFallthroughDest() const {
-    assert(FallthroughDest && "fallthrough dest is not set until Sema");
     return FallthroughDest;
   }
   void setFallthroughDest(CaseStmt *C) {
diff --git a/lib/AST/Decl.cpp b/lib/AST/Decl.cpp
index 75b99a22e73..09115678a82 100644
--- a/lib/AST/Decl.cpp
+++ b/lib/AST/Decl.cpp
@@ -1725,7 +1725,10 @@ StringRef PatternBindingEntry::getInitStringRepresentation(
 
 SourceRange PatternBindingDecl::getSourceRange() const {
   SourceLoc startLoc = getStartLoc();
-  SourceLoc endLoc = getPatternList().back().getSourceRange().End;
+  SourceLoc endLoc = startLoc;
+  if (!getPatternList().empty()) {
+    endLoc = getPatternList().back().getSourceRange().End;
+  }
   if (startLoc.isValid() != endLoc.isValid()) return SourceRange();
   return { startLoc, endLoc };
 }
