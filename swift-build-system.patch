diff --git a/CMakeLists.txt b/CMakeLists.txt
index bc9b6790922..2543fa1ae37 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -966,12 +966,12 @@ if(SWIFT_PARALLEL_LINK_JOBS)
   endif()
 endif()
 
-# Set the CMAKE_OSX_* variables in a way that minimizes conflicts.
-if("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin" AND NOT CMAKE_CROSSCOMPILING)
-  set(CMAKE_OSX_SYSROOT "${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_PATH}")
-  set(CMAKE_OSX_ARCHITECTURES "")
-  set(CMAKE_OSX_DEPLOYMENT_TARGET "")
-endif()
+# # Set the CMAKE_OSX_* variables in a way that minimizes conflicts.
+# if("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin" AND NOT CMAKE_CROSSCOMPILING)
+#   set(CMAKE_OSX_SYSROOT "${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_PATH}")
+#   set(CMAKE_OSX_ARCHITECTURES "")
+#   set(CMAKE_OSX_DEPLOYMENT_TARGET "")
+# endif()
 
 if(SWIFT_INCLUDE_TOOLS)
   message(STATUS "Building host Swift tools for ${SWIFT_HOST_VARIANT_SDK} ${SWIFT_HOST_VARIANT_ARCH}")
diff --git a/cmake/modules/CMakeLists.txt b/cmake/modules/CMakeLists.txt
index 8046ea79966..4c2c040a573 100644
--- a/cmake/modules/CMakeLists.txt
+++ b/cmake/modules/CMakeLists.txt
@@ -17,3 +17,55 @@ configure_file(
   SwiftConfig.cmake.in
   ${swift_cmake_builddir}/SwiftConfig.cmake
   @ONLY)
+
+
+# Generate install-tree CMake files
+set(SWIFT_CONFIG_CODE "
+# Compute the installation prefix from this LLVMConfig.cmake file location.
+get_filename_component(SWIFT_INSTALL_PREFIX \"\${CMAKE_CURRENT_LIST_FILE}\" PATH)")
+# Construct the proper number of get_filename_component(... PATH)
+# calls to compute the installation prefix.
+string(REGEX REPLACE "/" ";" _count "${SWIFT_INSTALL_PACKAGE_DIR}")
+foreach(p ${_count})
+  set(SWIFT_CONFIG_CODE "${SWIFT_CONFIG_CODE}
+get_filename_component(SWIFT_INSTALL_PREFIX \"\${SWIFT_INSTALL_PREFIX}\" PATH)")
+endforeach(p)
+set(SWIFT_INCLUDE_DIRS "\${SWIFT_INSTALL_PREFIX}/include")
+set(SWIFT_LIBRARY_DIRS "\${SWIFT_INSTALL_PREFIX}/lib")
+set(SWIFT_CMAKE_DIR "\${SWIFT_INSTALL_PREFIX}/${SWIFT_INSTALL_PACKAGE_DIR}")
+set(SWIFT_BINARY_DIR "\${SWIFT_INSTALL_PREFIX}")
+
+set(SWIFT_EXPORTS_FILE "\${SWIFT_CMAKE_DIR}/SwiftExports.cmake")
+set(SWIFT_CONFIG_EXPORTS ${SWIFT_EXPORTS})
+
+install(TARGETS ${SWIFT_CONFIG_EXPORTS}
+  DESTINATION .
+  EXPORT SwiftExports
+  COMPONENT dev)
+
+include(CMakePackageConfigHelpers)
+configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/SwiftConfig.cmake.in
+  "${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/SwiftConfig.cmake"
+  INSTALL_DESTINATION ${SWIFT_INSTALL_PACKAGE_DIR}/cmake/swift)
+
+install(FILES
+  ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/SwiftConfig.cmake
+  DESTINATION ${SWIFT_INSTALL_PACKAGE_DIR})
+
+install(EXPORT SwiftExports DESTINATION ${SWIFT_INSTALL_PACKAGE_DIR})
+
+# installing each header individually to preserve the directory structure
+macro(install_headers directory ext)
+  file(GLOB_RECURSE headers RELATIVE ${directory} ${directory}/*.${ext})
+  foreach(header ${headers})
+    get_filename_component(dir ${header} DIRECTORY)
+    install(FILES ${directory}/${header} DESTINATION ${SWIFT_INCLUDE_DIRS}/${dir})
+  endforeach()
+endmacro()
+install_headers(${SWIFT_INCLUDE_DIR} h)
+install_headers(${SWIFT_MAIN_INCLUDE_DIR} h)
+install_headers(${SWIFT_INCLUDE_DIR} def)
+install_headers(${SWIFT_MAIN_INCLUDE_DIR} def)
+
+install(DIRECTORY ${CMAKE_SOURCE_DIR}/stdlib/public/SwiftShims DESTINATION stdlib/public)
+
diff --git a/cmake/modules/SwiftComponents.cmake b/cmake/modules/SwiftComponents.cmake
index d7a03ae74ed..5506512d77f 100644
--- a/cmake/modules/SwiftComponents.cmake
+++ b/cmake/modules/SwiftComponents.cmake
@@ -74,7 +74,7 @@ set(_SWIFT_DEFINED_COMPONENTS
 # for the following exceptions.
 set(_SWIFT_DEFAULT_COMPONENTS "${_SWIFT_DEFINED_COMPONENTS}")
 # 'dev' takes up a lot of disk space and isn't part of a normal toolchain.
-list(REMOVE_ITEM _SWIFT_DEFAULT_COMPONENTS "dev")
+#list(REMOVE_ITEM _SWIFT_DEFAULT_COMPONENTS "dev")
 # These clang header options conflict with 'clang-builtin-headers'.
 list(REMOVE_ITEM _SWIFT_DEFAULT_COMPONENTS "clang-resource-dir-symlink")
 list(REMOVE_ITEM _SWIFT_DEFAULT_COMPONENTS "clang-builtin-headers-in-clang-resource-dir")
diff --git a/cmake/modules/SwiftSharedCMakeConfig.cmake b/cmake/modules/SwiftSharedCMakeConfig.cmake
index 26ada5dc9ac..f5e98328616 100644
--- a/cmake/modules/SwiftSharedCMakeConfig.cmake
+++ b/cmake/modules/SwiftSharedCMakeConfig.cmake
@@ -14,6 +14,20 @@ macro(swift_common_standalone_build_config_llvm product)
   # Then we import LLVMConfig. This is going to override whatever cached value
   # we have for LLVM_ENABLE_ASSERTIONS.
   find_package(LLVM CONFIG REQUIRED NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
+  if (APPLE)
+    if (LLVM_VERSION_MAJOR GREATER_EQUAL 12)
+      # Precompiled LLVM 12+ on macOS contains a hardcoded dependency on a very
+      # specific version of libcurses:
+      #
+      #   set_target_properties(LLVMSupport PROPERTIES
+      #     INTERFACE_LINK_LIBRARIES "m;ZLIB::ZLIB;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk/usr/lib/libcurses.tbd;LLVMDemangle"
+      #   )
+      #
+      # So we are monkey-patching it here
+      set_target_properties(LLVMSupport PROPERTIES
+        INTERFACE_LINK_LIBRARIES "z;curses;m;LLVMDemangle")
+    endif()
+  endif()
   list(APPEND CMAKE_MODULE_PATH "${LLVM_CMAKE_DIR}")
 
   set(LLVM_MAIN_SRC_DIR "${LLVM_BUILD_MAIN_SRC_DIR}"
diff --git a/utils/build-script b/utils/build-script
index 4440554af7e..8fd83951c4e 100755
--- a/utils/build-script
+++ b/utils/build-script
@@ -354,6 +354,11 @@ def apply_default_arguments(toolchain, args):
             args.android = True
         args.build_android = False
 
+    args.extra_cmake_options += [
+        '-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64'
+    ]
+
+
     # Include the Darwin supported architectures in the CMake options.
     if args.swift_darwin_supported_archs:
         args.extra_cmake_options.append(
